import com.vanniktech.maven.publish.GradlePlugin
import com.vanniktech.maven.publish.JavadocJar.Dokka
import com.vanniktech.maven.publish.MavenPublishBaseExtension

plugins {
  `java-gradle-plugin`
  alias(libs.plugins.kotlin.jvm)
  alias(libs.plugins.dokka)
  alias(libs.plugins.binaryCompatibilityValidator)
}
// This module is included in two projects:
// - In the root project where it's released as one of our artifacts
// - In build-logic project where we can use it for the runtime and samples.
//
// We only want to publish when it's being built in the root project.
if (rootProject.name == "dropshots-root") {
  apply(plugin = libs.plugins.mavenPublish.get().pluginId)
  extensions.configure<MavenPublishBaseExtension> {
    configure(GradlePlugin(Dokka("dokkaJavadoc")))
  }
} else {
  // Move the build directory when included in build-support so as to not poison the real build.
  // If we don't the configuration cache is broken and all tasks are considered not up-to-date.
  layout.buildDirectory = File(rootDir, "build/dropshots-gradle-plugin")
}

val generateVersionTask = tasks.register("generateVersion") {
  inputs.property("version", project.property("VERSION_NAME") as String)
  outputs.dir(project.layout.buildDirectory.dir("generated/version/kotlin"))
  doLast {
    val output = File(outputs.files.first(), "com/dropbox/dropshots/Version.kt")
    output.parentFile.mkdirs()
    output.writeText("""
      |// Generated by gradle task.
      |package com.dropbox.dropshots
      |public const val VERSION: String = "${inputs.properties["version"]}"
    """.trimMargin())
  }
}

sourceSets.main {
  java.srcDir(generateVersionTask)
}

kotlin {
  explicitApi()
}

gradlePlugin {
  plugins {
    plugins.create("dropshots") {
      id = "com.dropbox.dropshots"
      implementationClass = "com.dropbox.dropshots.DropshotsPlugin"
    }
  }
}

// See https://github.com/slackhq/keeper/pull/11#issuecomment-579544375 for context
val releaseMode = hasProperty("dropshots.releaseMode")
dependencies {
  compileOnly(gradleApi())
  implementation(platform(libs.kotlin.bom))
  implementation(libs.android.builder.test)
  implementation(libs.android.common)
  implementation(libs.android.ddmlib)
  implementation(projects.model)

  // Don't impose our version of KGP on consumers
  if (releaseMode) {
    compileOnly(libs.android)
    compileOnly(libs.kotlin.plugin)
  } else {
    implementation(libs.android)
    implementation(libs.kotlin.plugin)
  }

  testImplementation(gradleTestKit())
  testImplementation(platform(libs.kotlin.bom))
  testImplementation(libs.junit)
  testImplementation(libs.truth)
}

tasks.register("printVersionName") {
  doLast {
    println(project.property("VERSION_NAME"))
  }
}
